/* HEADS UP!
 * here we define all objects as mixins and we use them in the main or
 * component scss files
*/

@import 'custom-vars.scss';

// content area
@mixin contentArea ($contentAreaId) {
    #{$contentAreaId} {
        margin-left: $contentAreaMarginLeft !important;
        max-width: 100%;
    }

    #{$contentAreaId}-content-wrap {
        width:$contentAreaWidth;
    }
}

// go to top button
@mixin goToTopBtn($btnID) {
    #{$btnID} {
        position: $pos-fixed;
        bottom: $m-20px;
        right: $m-50px;
        width: $s-30px;
        cursor: $cr-pointer;
    }
}

// page toc
// toc_container = the container containing the page toc
// toc = the actually toc
// tocItem = the li or li.a element inside the toc
@mixin toc($tocBase) {
    
    #{$tocBase} {
        padding: $tocPadding;
    }

    // all toc items visible
    #{$tocBase} .nav .nav {
        display: $allTocItemsVisibility;
      }
    
    #{$tocBase}  ul {
        padding-left: $tocListPadding !important
      }
    
    #{$tocBase}_container {
        position: $tocContainerPosition;
        display: $tocContainerInitialView;
        padding: $tocContainerPadding;
        border-left: $tocContainerBorderLeft;
        border-top: $tocContainerBorderTop;
        border-bottom: $tocContainerBorderBottom;
        border-right: $tocContainerBorderRight;
        border-radius:$tocContainerBorderRadius;
        height: $tocContainerMaxHeight;
        overflow-y: $tocContainerOverflowY;
    }

    #{$tocBase}_container_heading {
        text-align: $tocContainerHeadingTextAlignment;
    }
}

@mixin tocItem($tocBase) {
    nav[data-toggle=#{$tocBase}] {
        padding-left:$tocNavPaddingLeft !important;
    }

    nav[data-toggle=#{$tocBase}] .nav-link+ul {
        padding-bottom:$tocNavNestedULPaddingBottm !important;
        padding-left:$tocNavNestedULPaddingLeft !important;
        padding-top:$tocNavNestedULPaddingTop !important;
    }

    nav[data-toggle=#{$tocBase}] .nav>li>a {
   
        padding-bottom:$tocItemLinkPaddingBottom !important;
        padding-top:$tocItemLinkPaddingTop !important;
    }

    nav[data-toggle=#{$tocBase}] .nav-link.active, nav[data-toggle=#{$tocBase}] .nav-link.active:focus, nav[data-toggle=#{$tocBase}] .nav-link.active:hover {
        font-weight:$tocFontWeight;
        
    }
    
    nav[data-toggle=#{$tocBase}] .nav>li>a {
        color:$tocFontColor
    }

    nav[data-toggle=#{$tocBase}] .nav>li::before {
        display:$tocItemSymbolBeforeLiTagVisibility;
    }

    #{$tocItemActiveLight}, #{$tocItemActiveLight}:hover {
        border-left: $tocItemLinkBorderLeftOnActiveLight !important;
    }

    #{$tocItemActiveDark}, #{$tocItemActiveDark}:hover {
        border-left: $tocItemLinkBorderLeftOnActiveDark !important;
    }
    
}

// sidebar
@mixin sidebar($sidebarContainer, $sidebarElements, $sidebarContentList, $sidebarCustomFooter, $sidebarTitle, $sidebarLogo, $sideBarFooter) {
    
    #{$sidebarContainer} {
        width: $sidebarWidth;
        min-width: $sidebarMinWidth;
    }

    @each $element in $sidebarElements {
        #{$element} {
            padding-left: $sidebarPaddingToAlignElementsLeft;
        }
    }

    @each $element in $sidebarContentList {
        #{$element} {
            padding-right: $sidebarPaddingRight;
        }
    }

    #{$sidebarCustomFooter} #footer_first_row {
        margin-bottom:$sidebarFooterFirstRowMarginBottom;
    }

    #{$sidebarTitle} {
        padding-left: $sidebarTitlePaddingLeft;
    }

    #{$sidebarLogo} {
        width:$sidebarLogoSize;
    }

    #{$sideBarFooter} {
        border-top:$sidebarFooterBorderTop;
    }

}

// header above the content
@mixin headerAboveContent($siteHeaderElements) {
    
    // set the background
    @each $element in map-get($siteHeaderElements, elementsForBackground) {
        #{$element}, #{$element}:hover {
            background: $headerBackground;
        }
    }

    // make the header sicky
    #{map-get($siteHeaderElements, stickyElement)} {
        position:$stickyElementPosition;
        top:$stickyElementTopOffset;
        z-index:$stickyElementZIndex;
        margin-left:$correctionMargin;
        justify-content: $elementsPositionInHeader; 
    }

    // style aux links container and links
    #{map-get($siteHeaderElements, auxLinksContainer)} {
        padding-right: $auxContainerPaddingRight;
    }

    // style algolia search button and contaner
    #{map-get($siteHeaderElements, algoliaSearchBtn)} {
        align-self: $algoliaSearchBtnVerticalAlignment;
    }

    #{map-get($siteHeaderElements, algoliaSearchBox)} {
        background-color: $algoliaOverlay !important;
    }

    // style the default theme search (if available)
    #{map-get($siteHeaderElements, defaultSearch)} {
        height: $defaultSearchHeightToFitInHeader !important;
        align-self: $defaultSearchVerticalAlignment;
        padding-left: $defaultSearchPaddingLeft;
    }

    #{map-get($siteHeaderElements, themeSwitcher)} {
        width: $themeSwitcherWidth; 
        height: $themeSwitcherHeight;
        align-self: $themeSwitcherVerticalAlignement; 
        cursor: $themeSwitcherCursor;
        border: $themeSwitcherBorder;
        border-radius: $themeSwitcherBorderRadius;
        padding: $themeStwitcherPadding;
    }

    #{map-get($siteHeaderElements, themeSwitcher)}:hover{
        transform: scale(1.1);
    }
}

// tag search
@mixin tagSearch($tagSearchElements) {
    #{map-get($tagSearchElements, searchInput)} {
        width: $tagSearchWidth;
        padding: $tagSearchInputPadding;
        background-color: $tagSearchBackground;
        border: $tagSearchBorders;
        color: $tagSearchTextColor;

    }

    #{map-get($tagSearchElements, searchResults)} {
        position: $tagSearchResultsPosition;
        z-index: $tagSearchResultsZIndex;
        background-color: $tagSearchBackground;
        border: $b-none;
        border-top: $tagSearchBorders;
        border-bottom: $tagSearchBorders;
        border-left: $tagSearchBorders;
        border-right: $tagSearchBorders;
        width: $tagSearchWidth;
        padding: $tagSearchResultsPadding;
        margin: $tagSearchResultsMargin;
        list-style: $tagSearchResultsListStyle;
        max-height: $tagSearchResultsMaxHeight;
        overflow-y: $tagSearchResultsOverflow;
        display: $tagSearchResultsDefaultDisplay;
      
        margin-top: $tagSearchResultsMarginTop;
        border-radius: $brad-0px $brad-0px $tagSearchResultsBorderBottomRadius $tagSearchResultsBorderBottomRadius;
        border-top: $tagSearchBorders;

        overflow-y: $tagSearchResultsOverflowY !important;

    }

    #{map-get($tagSearchElements, searchResults)} li {
        padding: $tagSearchResultsItemPadding;
        cursor: $tagSearchResultsItemCursor;
        color: $tagSearchTextColor !important;
        margin: $tagSearchResultsItemMargin !important;
    }

    #{map-get($tagSearchElements, searchResults)} li:hover {
        background-color: $tagSearchResultsItemMarkedBackground;
    }

    #{map-get($tagSearchElements, searchResults)} li.selected {
        background-color: $tagSearchResultsItemMarkedBackground;
    }

    #{map-get($tagSearchElements, showTagCloudButton)}{
        width: $tagCloudShowButtonWidth;
    }
}

// tags on page
@mixin tagsOnPage($tagOnPageElements) {
    #{map-get($tagOnPageElements, badge)} {
        top: $badgeTopPosition;
        left: $badgeLeftPositions;
    }
}

// tag cloud
@mixin tagCloud($tagCloudElements) {
    #{map-get($tagCloudElements, tagCloudContainer)} {
        max-height:$tagCloudBodyMaxHeight;
        overflow-y: $tagCloudBodyOverflowY;
    }
}

// data tables
@mixin dataTable($tableElements) {
    #{map-get($tableElements, tableWrapper)} {
        box-shadow: $tableBoxShadow;
        overflow-x: $tableOverflowX;
        padding:$tableWrapperPadding;
    }

    #{map-get($tableElements, paginationButtonLink)} {
        font-size:$tablePaginationFontSize !important;
    }

    #{map-get($tableElements, nothingFound)} {
        background-color:$tableNothingFoundBackground !important;
        color: $tableNothingFoundTextColor !important       
    }

    #{map-get($tableElements, tableRow)} {
        border-color: $tableInnerBorderColor !important;
    }

    #{map-get($tableElements, firstColumn)} {
        z-index:$tableFreezeColumnZIndex !important;
        cursor: $tableFirstColumnCursor;
    }

    #{map-get($tableElements, dateField)} {
        text-align: $tableDateFieldTextAlignment !important;
    }

    #{map-get($tableElements, colvisButton)} {
        font-size:$tableColvisBtnFontSize;
    }
}

// cat search
@mixin catSearch($catSearchElements) {
    #{map-get($catSearchElements, searchInput)} {
        width: $catSearchWidth;
        padding: $catSearchInputPadding;
        background-color: $catSearchBackground;
        border: $catSearchBorders;
        color: $catSearchTextColor;

    }

    #{map-get($catSearchElements, searchResults)} {
        position: $catSearchResultsPosition;
        z-index: $catSearchResultsZIndex;
        background-color: $catSearchBackground;
        border: $b-none;
        border-top: $catSearchBorders;
        border-bottom: $catSearchBorders;
        border-left: $catSearchBorders;
        border-right: $catSearchBorders;
        width: $catSearchWidth;
        padding: $catSearchResultsPadding;
        margin: $catSearchResultsMargin;
        list-style: $catSearchResultsListStyle;
        max-height: $catSearchResultsMaxHeight;
        overflow-y: $catSearchResultsOverflow;
        display: $catSearchResultsDefaultDisplay;
      
        margin-top: $catSearchResultsMarginTop;
        border-radius: $brad-0px $brad-0px $catSearchResultsBorderBottomRadius $catSearchResultsBorderBottomRadius;
        border-top: $catSearchBorders;

        overflow-y: $catSearchResultsOverflowY !important;
    }

    #{map-get($catSearchElements, searchResults)} li {
        padding: $catSearchResultsItemPadding;
        cursor: $catSearchResultsItemCursor;
        color: $catSearchTextColor !important;
        margin: $catSearchResultsItemMargin !important;
    }

    #{map-get($catSearchElements, searchResults)} li:hover {
        background-color: $catSearchResultsItemMarkedBackground;
    }

    #{map-get($catSearchElements, searchResults)} li.selected {
        background-color: $catSearchResultsItemMarkedBackground;
    }

    #{map-get($catSearchElements, showCatCloudButton)}{
        width: $catCloudShowButtonWidth;
    }
}

// cats on page
@mixin catsOnPage($catOnPageElements) {
    #{map-get($catOnPageElements, badge)} {
        top: $badgeTopPosition;
        left: $badgeLeftPositions;
    }
}

// page full info offcanvas
@mixin offCanvasPageFullInfo($offcanvasElements) {
    #{map-get($offcanvasElements, container)} {
        width: $offcanvasWidth !important;
    }

    #{map-get($offcanvasElements, tagsCardBody)} {
        //max-height: $tagsCardBodyMaxHeight;
        overflow-y: $tagsCardBodyOverflowY;
    }

    #{map-get($offcanvasElements, customNoteButton)} {
        width: $customNotesButtonWidth !important;
    }
}

// context menu
@mixin editor($editorElements) {
    #{map-get($editorElements, editZone)} {
        background: $editZoneBackground;
    }

    #{map-get($editorElements, documentEditor)} {
        height:$documentEditorHeight;
        margin-top:$documentEditorTopMargin;
        border-radius: $documentEditorBorderRadius !important;
    }

    #{map-get($editorElements, balloon)} {
        z-index: $documentEditorBaloonZIndex !important;        
    }

    #{map-get($editorElements, addTagLine)} {
        border-top: $documentEditorAddTagLineBorderTop;
        padding-top: $documentEditorAddTagLinePaddingTop;        
    }
}

// editor
@mixin contextMenu($contextMenuElements) {
    #{map-get($contextMenuElements, container)} {
        z-index: $contextMenuZIndex !important;
        position: $contextMenuContainerPosition;
        //background: $contextMenuContainerBackground;
    }

    #{map-get($contextMenuElements, menuItem)} {
        cursor: $contextMenuItemCursor;
        padding-left: $contextMenuItemPaddingLeft !important;
    }

    #{map-get($contextMenuElements, menuItemLink)} {
        font-size: $contextMenuLinkFontSize;
        align-items: $contextMenuItemAlgnItemsVertical !important;
    }

    #{map-get($contextMenuElements, menuItemList)} {
        padding-left: $contextMenuListPaddingLeft !important;
        list-style: $contextMenuListStyle;
    }

    #{map-get($contextMenuElements, pageTagContextMenuFooterButton)} {
        width: $contextMenuPageTagFooterBtnWidth;
    }
}