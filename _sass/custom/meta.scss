/* HEADS UP!
 * here we define all objects as mixins and we use them in the main or
 * component scss files
*/

@import 'custom-vars.scss';

// content area
@mixin contentArea ($contentAreaId) {
    #{$contentAreaId} {
        margin-left: $contentAreaMarginLeft !important;
        max-width: 100%;
    }

    #{$contentAreaId}-content-wrap {
        width:$contentAreaWidth;
    }
}

// go to top button
@mixin goToTopBtn($btnID) {
    #{$btnID} {
        position: $pos-fixed;
        bottom: $m-20px;
        right: $m-50px;
        width: $s-30px;
        cursor: $c-pointer;
    }
}

// page toc
// toc_container = the container containing the page toc
// toc = the actually toc

@mixin toc($tocBase) {
    
    #{$tocBase} {
        padding: $tocPadding;
    }
    
    #{$tocBase}_container {
        position: $tocContainerPosition;
        display: $tocContainerInitialView;
        padding: $tocContainerPadding;
        border-left: $tocContainerBorderLeft;
        border-top: $tocContainerBorderTop;
        border-bottom: $tocContainerBorderBottom;
        border-right: $tocContainerBorderRight;
        border-radius:$tocContainerBorderRadius
    }
}

@mixin tocItem($tocBase) {
    nav[data-toggle=#{$tocBase}] {
        padding-left:$tocNavPaddingLeft !important;
    }

    nav[data-toggle=#{$tocBase}] .nav-link+ul {
        padding-bottom:$tocNavNestedULPaddingBottm !important;
        padding-left:$tocNavNestedULPaddingLeft !important;
        padding-top:$tocNavNestedULPaddingTop !important;
    }

    nav[data-toggle=#{$tocBase}] .nav>li>a {
   
        padding-bottom:$tocItemLinkPaddingBottom !important;
        padding-top:$tocItemLinkPaddingTop !important;
    }

    nav[data-toggle=#{$tocBase}] .nav>li>a:focus, nav[data-toggle=#{$tocBase}] .nav>li>a:hover {
        border-left:$tocItemLinkBorderLeftOnActive !important
    }

    nav[data-toggle=#{$tocBase}] .nav-link.active, nav[data-toggle=#{$tocBase}] .nav-link.active:focus, nav[data-toggle=#{$tocBase}] .nav-link.active:hover {
        font-weight:$tocFontWeight;
        
    }
    
    nav[data-toggle=#{$tocBase}] .nav>li>a {
        color:$tocFontColor
    }

    nav[data-toggle=#{$tocBase}] .nav>li::before {
        display:$tocItemSymbolBeforeLiTagVisibility;
    }
    
}

// sidebar
@mixin sidebar($sidebarContainer, $sidebarElements, $sidebarContentList, $sidebarCustomFooter, $sidebarTitle, $sidebarLogo) {
    
    #{$sidebarContainer} {
        width: $sidebarWidth;
        min-width: $sidebarMinWidth;
    }

    @each $element in $sidebarElements {
        #{$element} {
            padding-left: $sidebarPaddingToAlignElementsLeft;
        }
    }

    @each $element in $sidebarContentList {
        #{$element} {
            padding-right: $sidebarPaddingRight;
        }
    }

    #{$sidebarCustomFooter} #footer_first_row {
        margin-bottom:$sidebarFooterFirstRowMarginBottom;
    }

    #{$sidebarTitle} {
        padding-left: $sidebarTitlePaddingLeft;
    }

    #{$sidebarLogo} {
        width:$sidebarLogoSize;
    }

}

// header above the content

@mixin headerAboveContent($siteHeaderElements) {
    
    // set the background
    @each $element in map-get($siteHeaderElements, elementsForBackground) {
        #{$element}, #{$element}:hover {
            background: $headerBackground;
        }
    }

    // make the header sicky
    #{map-get($siteHeaderElements, stickyElement)} {
        position:$stickyElementPosition;
        top:$stickyElementTopOffset;
        z-index:$stickyElementZIndex;
        margin-left:$correctionMargin;
        justify-content: $elementsPositionInHeader; 
    }

    // style aux links container and links
    #{map-get($siteHeaderElements, auxLinksContainer)} {
        padding-right: $auxContainerPaddingRight;
    }

    #{map-get($siteHeaderElements, auxLinksItem)} {
        height: $auxItemHeightToFitInHeader !important;
        align-self: $auxItemVerticalAlignment;
    }

    // style algolia search button and contaner
    #{map-get($siteHeaderElements, algoliaSearchBtn)} {
        align-self: $algoliaSearchBtnVerticalAlignment;
    }

    #{map-get($siteHeaderElements, algoliaSearchBox)} {
        background-color: $algoliaOverlay !important;
    }

    // style the default theme search (if available)
    #{map-get($siteHeaderElements, defaultSearch)} {
        height: $defaultSearchHeightToFitInHeader !important;
        align-self: $defaultSearchVerticalAlignment;
        padding-left: $defaultSearchPaddingLeft;
    }

    #{map-get($siteHeaderElements, themeSwitcher)} {
        width: $themeSwitcherWidth; 
        height: $themeSwitcherHeight;
        align-self: $themeSwitcherVerticalAlignement; 
        cursor: $themeSwitcherCursor;
        border: $themeSwitcherBorder;
        border-radius: $themeSwitcherBorderRadius;
        padding: $themeStwitcherPadding;
    }

    #{map-get($siteHeaderElements, themeSwitcher)}:hover{
        transform: scale(1.1);
    }
}


