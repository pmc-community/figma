test G11 How it works The accordion uses ({{< docsref “/components/collapse” >}}) internally to make it collapsible. {{< callout info >}} {{< partial “callouts/info-prefersreducedmotion.md” >}} {{< /callout >}}  Click the accordions below to expand/collapse the accordion content. To render an accordion that’s expanded by default:  add the .show class on the .accordion-collapse element. drop the .collapsed class from the .accordion-button element and set its aria-expanded attribute to true.  {{< example >}}      This is the first item's accordion body. It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.        This is the second item's accordion body. It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.        This is the third item's accordion body. It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.     {{< /example >}}  Add .accordion-flush to remove some borders and rounded corners to render accordions edge-to-edge with their parent container. {{< example class=”bg-body-secondary” >}}     Placeholder content for this accordion, which is intended to demonstrate the .accordion-flush class. This is the first item's accordion body.      Placeholder content for this accordion, which is intended to demonstrate the .accordion-flush class. This is the second item's accordion body. Let's imagine this being filled with some actual content.      Placeholder content for this accordion, which is intended to demonstrate the .accordion-flush class. This is the third item's accordion body. Nothing more exciting happening here in terms of content, but just filling up the space to make it look, at least at first glance, a bit more representative of how this would look in a real-world application.    {{< /example >}}  Omit the data-bs-parent attribute on each .accordion-collapse to make accordion items stay open when another item is opened. {{< example >}}      This is the first item's accordion body. It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.        This is the second item's accordion body. It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.        This is the third item's accordion body. It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the .accordion-body, though the transition does limit overflow.     {{< /example >}}  Please read the ({{< docsref “/components/collapse#accessibility” >}}) for more information.   {{< added-in “5.2.0” >}} As part of Bootstrap’s evolving CSS variables approach, accordions now use local CSS variables on .accordion for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too. {{< scss-docs name=”accordion-css-vars” file=”scss/_accordion.scss” >}}  {{< scss-docs name=”accordion-variables” file=”scss/_variables.scss